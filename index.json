{
  "api/index.html": {
    "href": "api/index.html",
    "title": "mk.helpers API Reference | mk.helpers API",
    "summary": "mk.helpers API Reference Browse the complete API documentation using the navigation on the left. Namespaces mk.helpers - Core utilities and helper classes Key Classes ThreadLord - Thread pool manager with backpressure and error handling PerfTimer - High-precision performance timer EnumHelper - Enum utility methods IpHelper - IP address operations RandomHelper - Enhanced random number generation ReflectionHelper - Reflection utilities StaticData - Common static data access Extension Methods DateTimeExtensions - DateTime utilities StringExtensions - String manipulation ListExtensions - List operations DictionaryExtensions - Dictionary utilities ObjectExtensions - Object utilities"
  },
  "api/mk.helpers.Crc32Hash.html": {
    "href": "api/mk.helpers.Crc32Hash.html",
    "title": "Class Crc32Hash | mk.helpers API",
    "summary": "Class Crc32Hash Implements a 32-bit CRC hash algorithm compatible with Zip etc. Inheritance object HashAlgorithm Crc32Hash Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public sealed class Crc32Hash : HashAlgorithm, ICryptoTransform, IDisposable Remarks Crc32 should only be used for backward compatibility with older file formats and algorithms. It is not secure enough for new applications. If you need to call multiple times for the same data either use the HashAlgorithm interface or remember that the result of one Compute call needs to be ~ (XOR) before being passed in as the seed for the next Compute call. Constructors Crc32Hash() Initializes a new instance of the Crc32Hash class using the default polynomial and seed values. Declaration public Crc32Hash() Crc32Hash(uint, uint) Initializes a new instance of the Crc32Hash class using the specified polynomial and seed values. Declaration public Crc32Hash(uint polynomial, uint seed) Parameters Type Name Description uint polynomial The polynomial value to use for CRC32 calculation. uint seed The seed value to use for CRC32 calculation. Fields DefaultPolynomial Default polynomial value for CRC32 calculation. Declaration public const uint DefaultPolynomial = 3988292384 Field Value Type Description uint DefaultSeed Default seed value for CRC32 calculation. Declaration public const uint DefaultSeed = 4294967295 Field Value Type Description uint Properties HashSize Gets the size, in bits, of the computed hash code. Declaration public override int HashSize { get; } Property Value Type Description int The size, in bits, of the computed hash code. Overrides HashAlgorithm.HashSize Methods Compute(byte[]) Computes the CRC32 hash value for the specified buffer using the default seed value. Declaration public static uint Compute(byte[] buffer) Parameters Type Name Description byte[] buffer The input buffer for which to compute the hash value. Returns Type Description uint The computed CRC32 hash value. Compute(uint, byte[]) Computes the CRC32 hash value for the specified buffer using the specified seed value. Declaration public static uint Compute(uint seed, byte[] buffer) Parameters Type Name Description uint seed The seed value to use for CRC32 calculation. byte[] buffer The input buffer for which to compute the hash value. Returns Type Description uint The computed CRC32 hash value. Compute(uint, uint, byte[]) Computes the CRC32 hash value for the specified buffer using the specified polynomial and seed values. Declaration public static uint Compute(uint polynomial, uint seed, byte[] buffer) Parameters Type Name Description uint polynomial The polynomial value to use for CRC32 calculation. uint seed The seed value to use for CRC32 calculation. byte[] buffer The input buffer for which to compute the hash value. Returns Type Description uint The computed CRC32 hash value. HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() Initialize() Initializes an implementation of the HashAlgorithm class. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() Implements ICryptoTransform IDisposable Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.CsvHelper.html": {
    "href": "api/mk.helpers.CsvHelper.html",
    "title": "Class CsvHelper | mk.helpers API",
    "summary": "Class CsvHelper Provides methods for converting data to CSV format. Inheritance object CsvHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class CsvHelper Methods ToCsv<T>(IEnumerable<T>) Converts a collection of items to a CSV string. Declaration public static string ToCsv<T>(this IEnumerable<T> items) where T : class Parameters Type Name Description IEnumerable<T> items The collection of items. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the collection. ToCsv<T>(IEnumerable<T>, bool, char) Converts a collection of items to a CSV string with optional header. Declaration public static string ToCsv<T>(this IEnumerable<T> items, bool addHeader = false, char delimiter = ',') where T : class Parameters Type Name Description IEnumerable<T> items The collection of items. bool addHeader Whether to add a header row. char delimiter The delimiter character. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the collection. ToCsv<T>(IEnumerable<T>, char) Converts a collection of items to a CSV string with a specified delimiter. Declaration public static string ToCsv<T>(this IEnumerable<T> items, char delimiter = ',') where T : class Parameters Type Name Description IEnumerable<T> items The collection of items. char delimiter The delimiter character. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the collection. ToCsv<T>(List<T>) Converts a list of items to a CSV string. Declaration public static string ToCsv<T>(this List<T> items) where T : class Parameters Type Name Description List<T> items The list of items. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the list. ToCsv<T>(List<T>, char) Converts a list of items to a CSV string with a specified delimiter. Declaration public static string ToCsv<T>(this List<T> items, char delimiter = ',') where T : class Parameters Type Name Description List<T> items The list of items. char delimiter The delimiter character. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the list. ToCsv<T>(T, bool, char) Converts an item to its CSV representation. Declaration public static string ToCsv<T>(T item, bool addHeader = false, char delimiter = ',') where T : class Parameters Type Name Description T item The item to convert. bool addHeader Whether to add a header row. char delimiter The delimiter character. Returns Type Description string The CSV representation of the item. Type Parameters Name Description T The type of the item. ToCsv<T>(T[], bool, char) Converts an array of items to a CSV string with optional header. Declaration public static string ToCsv<T>(this T[] items, bool addHeader = false, char delimiter = ',') where T : class Parameters Type Name Description T[] items The array of items. bool addHeader Whether to add a header row. char delimiter The delimiter character. Returns Type Description string The CSV string. Type Parameters Name Description T The type of items in the array."
  },
  "api/mk.helpers.DateTimeExtensions.html": {
    "href": "api/mk.helpers.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | mk.helpers API",
    "summary": "Class DateTimeExtensions Provides extension methods for working with DateTime values. Inheritance object DateTimeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class DateTimeExtensions Methods BeginningOfTheDay(DateTime) Gets the beginning of the day for a given DateTime. Declaration public static DateTime BeginningOfTheDay(this DateTime date) Parameters Type Name Description DateTime date The DateTime value. Returns Type Description DateTime The beginning of the day. Ceil(DateTime, TimeSpan) Ceils a DateTime to the nearest multiple of a TimeSpan. Declaration public static DateTime Ceil(this DateTime date, TimeSpan span) Parameters Type Name Description DateTime date The DateTime value. TimeSpan span The TimeSpan to ceil to. Returns Type Description DateTime The ceiled DateTime value. EndOfMonth(DateTime) Gets the last day and time of the month for a given DateTime. Declaration public static DateTime EndOfMonth(this DateTime dt) Parameters Type Name Description DateTime dt The DateTime value. Returns Type Description DateTime The last day of the month. EndOfTheDay(DateTime) Gets the end of the day for a given DateTime. Declaration public static DateTime EndOfTheDay(this DateTime date) Parameters Type Name Description DateTime date The DateTime value. Returns Type Description DateTime The end of the day. EndOfWeek(DateTime) Gets the last day of the week for a given DateTime. Declaration public static DateTime EndOfWeek(this DateTime dt) Parameters Type Name Description DateTime dt The DateTime value. Returns Type Description DateTime The last day of the week. FillInEmptyDates<T>(IEnumerable<DateTime>, IEnumerable<T>, Func<T, DateTime>, Func<DateTime, T>) Fills in missing dates in a sequence of data using a default item factory. Declaration public static IEnumerable<T> FillInEmptyDates<T>(this IEnumerable<DateTime> allDates, IEnumerable<T> sourceData, Func<T, DateTime> dateSelector, Func<DateTime, T> defaultItemFactory) Parameters Type Name Description IEnumerable<DateTime> allDates The list of all dates. IEnumerable<T> sourceData The source data collection. Func<T, DateTime> dateSelector A function to extract the date from a data item. Func<DateTime, T> defaultItemFactory A function to create a default item based on a date. Returns Type Description IEnumerable<T> An IEnumerable<T> with missing dates filled in. Type Parameters Name Description T The type of the data items. Floor(DateTime, TimeSpan) Floors a DateTime to the nearest multiple of a TimeSpan. Declaration public static DateTime Floor(this DateTime date, TimeSpan span) Parameters Type Name Description DateTime date The DateTime value. TimeSpan span The TimeSpan to floor to. Returns Type Description DateTime The floored DateTime value. GetAge(DateTime) Gets the age based on the difference between a birthdate and the current date. Declaration public static int GetAge(this DateTime birthDate) Parameters Type Name Description DateTime birthDate The birthdate. Returns Type Description int The calculated age. GetAge(DateTime, DateTime) Gets the age of a person based on their birthdate and a given reference date. Declaration public static int GetAge(this DateTime birthDate, DateTime at) Parameters Type Name Description DateTime birthDate The birthdate of the person. DateTime at Returns Type Description int The age of the person. GetDateRange(DateTime, DateTime) Generates a range of dates between two DateTime values. Declaration public static IEnumerable<DateTime> GetDateRange(this DateTime startDate, DateTime endDate) Parameters Type Name Description DateTime startDate The start date. DateTime endDate The end date. Returns Type Description IEnumerable<DateTime> An IEnumerable<T> of DateTime values within the range. GetDaySuffix(DateTime) Gets the suffix for the day in a DateTime (e.g., \"st\", \"nd\", \"rd\", \"th\"). Declaration public static string GetDaySuffix(this DateTime date) Parameters Type Name Description DateTime date The DateTime value. Returns Type Description string The day suffix. LastDayOfMonth(DateTime) Gets the last day of the month for a given DateTime. Declaration public static DateTime LastDayOfMonth(this DateTime dt) Parameters Type Name Description DateTime dt The DateTime value. Returns Type Description DateTime The last day of the month. Round(DateTime, TimeSpan) Rounds a DateTime to the nearest multiple of a TimeSpan. Declaration public static DateTime Round(this DateTime date, TimeSpan span) Parameters Type Name Description DateTime date The DateTime value. TimeSpan span The TimeSpan to round to. Returns Type Description DateTime The rounded DateTime value. StartOfMonth(DateTime) Gets the first day of the month for a given DateTime. Declaration public static DateTime StartOfMonth(this DateTime dt) Parameters Type Name Description DateTime dt The DateTime value. Returns Type Description DateTime The first day of the month. StartOfWeek(DateTime, DayOfWeek) Gets the start of the week for a given DateTime. Declaration public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek) Parameters Type Name Description DateTime dt The DateTime value. DayOfWeek startOfWeek The starting day of the week. Returns Type Description DateTime The start of the week DateTime value. TimeAgo(DateTime) Converts a DateTime to a human-readable time ago format. Declaration public static string TimeAgo(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The DateTime value. Returns Type Description string The time ago representation. ToNegative(TimeSpan) Declaration public static TimeSpan ToNegative(this TimeSpan span) Parameters Type Name Description TimeSpan span Returns Type Description TimeSpan ToPositive(TimeSpan) Converts a TimeSpan to a positive value if it is not already positive. Declaration public static TimeSpan ToPositive(this TimeSpan span) Parameters Type Name Description TimeSpan span Returns Type Description TimeSpan an positive TimeSpan Truncate(DateTime, long) Truncates a DateTime to a specified resolution. Declaration public static DateTime Truncate(this DateTime date, long resolution) Parameters Type Name Description DateTime date The DateTime value. long resolution The resolution to truncate to. Returns Type Description DateTime The truncated DateTime value."
  },
  "api/mk.helpers.DictionaryExtensions.html": {
    "href": "api/mk.helpers.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | mk.helpers API",
    "summary": "Class DictionaryExtensions Provides extension methods for working with Dictionary<TKey, TValue> and ConcurrentDictionary<TKey, TValue> collections. Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class DictionaryExtensions Methods IncrementAt<T>(IDictionary<T, int>, T) Increments the value at a specified key in a IDictionary<TKey, TValue>. Declaration public static void IncrementAt<T>(this IDictionary<T, int> dictionary, T index) Parameters Type Name Description IDictionary<T, int> dictionary The dictionary. T index The key to increment. Type Parameters Name Description T The type of keys in the dictionary. ToConcurrentBag<TSource>(IEnumerable<TSource>) Converts an IEnumerable<T> to a ConcurrentBag<T>. Declaration public static ConcurrentBag<TSource> ToConcurrentBag<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable<TSource> source The source collection. Returns Type Description ConcurrentBag<TSource> A ConcurrentBag<T> containing the elements of the source collection. Type Parameters Name Description TSource The type of elements in the source collection. ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) Converts an IEnumerable<T> to a ConcurrentDictionary<TKey, TValue>. Declaration public static ConcurrentDictionary<TKey, TElement> ToConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) Parameters Type Name Description IEnumerable<TSource> source The source collection. Func<TSource, TKey> keySelector A function to extract keys from elements. Func<TSource, TElement> elementSelector A function to extract values from elements. Returns Type Description ConcurrentDictionary<TKey, TElement> A ConcurrentDictionary<TKey, TValue> containing the elements of the source collection. Type Parameters Name Description TSource The type of elements in the source collection. TKey The type of the dictionary keys. TElement The type of the dictionary values. ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>) Converts an IEnumerable<T> to a ConcurrentDictionary<TKey, TValue> using a specified comparer. Declaration public static ConcurrentDictionary<TKey, TElement> ToConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description IEnumerable<TSource> source The source collection. Func<TSource, TKey> keySelector A function to extract keys from elements. Func<TSource, TElement> elementSelector A function to extract values from elements. IEqualityComparer<TKey> comparer An equality comparer to compare keys. Returns Type Description ConcurrentDictionary<TKey, TElement> A ConcurrentDictionary<TKey, TValue> containing the elements of the source collection. Type Parameters Name Description TSource The type of elements in the source collection. TKey The type of the dictionary keys. TElement The type of the dictionary values. TryGet<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Tries to get a value from a IDictionary<TKey, TValue> based on a key. Declaration public static TValue TryGet<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description IDictionary<TKey, TValue> dictionary The dictionary. TKey key The key to look up. Returns Type Description TValue The value associated with the key, or the default value if not found. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. TryGet<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Tries to get a value from a IDictionary<TKey, TValue> based on a key. Declaration public static TValue TryGet<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description IDictionary<TKey, TValue> dictionary The dictionary. TKey key The key to look up. TValue defaultValue Default value if key is not found Returns Type Description TValue The value associated with the key, or the default value if not found. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary."
  },
  "api/mk.helpers.EnumHelper.html": {
    "href": "api/mk.helpers.EnumHelper.html",
    "title": "Class EnumHelper | mk.helpers API",
    "summary": "Class EnumHelper Provides utility methods for working with enumerations. Inheritance object EnumHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class EnumHelper Methods Parse<T>(string) Parses a string representation of an enumeration value to its corresponding enumeration value. Declaration public static T Parse<T>(string text) where T : struct, IConvertible Parameters Type Name Description string text The string representation of the enumeration value to parse. Returns Type Description T The parsed enumeration value. Type Parameters Name Description T The type of the enumeration. Remarks This method attempts to parse the input text into the specified enumeration type. It supports variations in formatting such as underscores and spaces, and attempts to match the case-insensitive enum member names. TryParse<T>(string, out T) Tries to parse a string representation of an enumeration value to its corresponding enumeration value. Declaration public static bool TryParse<T>(string text, out T result) where T : struct, IConvertible Parameters Type Name Description string text The string representation of the enumeration value to parse. T result When this method returns, contains the parsed enumeration value if the parsing was successful. Returns Type Description bool true if the parsing was successful; otherwise, false. Type Parameters Name Description T The type of the enumeration. Remarks This method attempts to parse the input text into the specified enumeration type. It supports variations in formatting such as underscores and spaces, and attempts to match the case-insensitive enum member names."
  },
  "api/mk.helpers.FileHelper.DownloadProgress.html": {
    "href": "api/mk.helpers.FileHelper.DownloadProgress.html",
    "title": "Class FileHelper.DownloadProgress | mk.helpers API",
    "summary": "Class FileHelper.DownloadProgress Inheritance object FileHelper.DownloadProgress Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public class FileHelper.DownloadProgress Properties BytesDownloaded Declaration public long BytesDownloaded { get; set; } Property Value Type Description long Progress Declaration public double? Progress { get; } Property Value Type Description double? TotalBytes Declaration public long? TotalBytes { get; set; } Property Value Type Description long? Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.FileHelper.html": {
    "href": "api/mk.helpers.FileHelper.html",
    "title": "Class FileHelper | mk.helpers API",
    "summary": "Class FileHelper Provides utility methods for file-related operations. Inheritance object FileHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class FileHelper Methods DownloadFileAsync(string, Action<long>?, string) Asynchronously downloads a file from the specified URL and saves it to the specified file path. Declaration public static Task<DownloadFileResult> DownloadFileAsync(string url, Action<long>? onDownloadProgress, string filePath = null) Parameters Type Name Description string url The URL of the file to download. Action<long> onDownloadProgress An optional action to report download progress. string filePath The file path to save the downloaded file. If not provided, a temporary file will be used. Returns Type Description Task<DownloadFileResult> A task representing the asynchronous operation and containing information about the downloaded file. DownloadFileAsync(string, Action<DownloadProgress>?, string) Asynchronously downloads a file from the specified URL and saves it to the specified file path. Declaration public static Task<DownloadFileResult> DownloadFileAsync(string url, Action<FileHelper.DownloadProgress>? onDownloadProgress, string filePath = null) Parameters Type Name Description string url The URL of the file to download. Action<FileHelper.DownloadProgress> onDownloadProgress An optional action to report download progress. string filePath The file path to save the downloaded file. If not provided, a temporary file will be used. Returns Type Description Task<DownloadFileResult> A task representing the asynchronous operation and containing information about the downloaded file. ReadJsonArrayFile<T>(string, Action<T>, Action<double>, bool) Reads a JSON array file and processes its elements asynchronously. Declaration public static void ReadJsonArrayFile<T>(string filePath, Action<T> onData, Action<double> onProgress, bool readSynchronously = false) Parameters Type Name Description string filePath The path of the JSON array file to read. Action<T> onData An action to process each deserialized object. Action<double> onProgress An action to report progress while reading the file. bool readSynchronously Specifies whether to read synchronously or asynchronously. Type Parameters Name Description T The type of objects in the JSON array."
  },
  "api/mk.helpers.HttpClientExtensions.html": {
    "href": "api/mk.helpers.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | mk.helpers API",
    "summary": "Class HttpClientExtensions Provides extension methods for the HttpClient class. Inheritance object HttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class HttpClientExtensions Methods DownloadDataAsync(HttpClient, string, Stream, Action<long>, CancellationToken) Asynchronously downloads data from the specified URL and writes it to the provided destination stream. Declaration public static Task DownloadDataAsync(this HttpClient client, string requestUrl, Stream destination, Action<long> downloadProgress = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient client The HttpClient instance. string requestUrl The URL to download from. Stream destination The stream to write the downloaded data to. Action<long> downloadProgress Optional action to report download progress. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task GetFileSizeAsync(HttpClient, string) Retrieves the file size of a resource using a HEAD request with HttpClient. Declaration public static Task<long?> GetFileSizeAsync(this HttpClient httpClient, string url) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL of the resource. Returns Type Description Task<long?> The size of the file in bytes. GetHeadersAsync(HttpClient, string) Retrieves all headers of a resource using a HEAD request with HttpClient. Declaration public static Task<Dictionary<string, string>> GetHeadersAsync(this HttpClient httpClient, string url) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL of the resource. Returns Type Description Task<Dictionary<string, string>> A dictionary containing the header key/value pairs. PostAsJsonAsync<T>(HttpClient, string, T) Sends an HTTP POST request with JSON data as the content. Declaration public static Task<HttpResponseMessage> PostAsJsonAsync<T>(this HttpClient httpClient, string url, T data) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL to send the request to. T data The data to be serialized and sent as JSON. Returns Type Description Task<HttpResponseMessage> A task representing the asynchronous operation. Type Parameters Name Description T The type of data to be serialized as JSON. PutAsJsonAsync<T>(HttpClient, string, T) Sends an HTTP PUT request with JSON data as the content. Declaration public static Task<HttpResponseMessage> PutAsJsonAsync<T>(this HttpClient httpClient, string url, T data) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL to send the request to. T data The data to be serialized and sent as JSON. Returns Type Description Task<HttpResponseMessage> A task representing the asynchronous operation. Type Parameters Name Description T The type of data to be serialized as JSON. ReadAsJsonAsync<T>(HttpContent) Asynchronously reads the HTTP content as JSON and deserializes it to the specified type. Declaration public static Task<T> ReadAsJsonAsync<T>(this HttpContent content) Parameters Type Name Description HttpContent content The HttpContent to read from. Returns Type Description Task<T> A task representing the asynchronous operation and containing the deserialized object. Type Parameters Name Description T The type to deserialize the JSON content to."
  },
  "api/mk.helpers.IntExtensions.html": {
    "href": "api/mk.helpers.IntExtensions.html",
    "title": "Class IntExtensions | mk.helpers API",
    "summary": "Class IntExtensions Provides extension methods for working with integer values. Inheritance object IntExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class IntExtensions Methods ZeroToNull(int) Converts zero to null for non-nullable integer values. Declaration public static int? ZeroToNull(this int value) Parameters Type Name Description int value The integer value to convert. Returns Type Description int? Null if the value is zero; otherwise, the original integer value. ZeroToNull(int?) Converts zero to null for nullable integer values. Declaration public static int? ZeroToNull(this int? value) Parameters Type Name Description int? value The nullable integer value to convert. Returns Type Description int? Null if the value is null or zero; otherwise, the original nullable integer value."
  },
  "api/mk.helpers.IpHelper.html": {
    "href": "api/mk.helpers.IpHelper.html",
    "title": "Class IpHelper | mk.helpers API",
    "summary": "Class IpHelper Provides utility methods for working with IP addresses and their numeric representations. Inheritance object IpHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class IpHelper Methods IpAddressToNumber(string) Converts an IP address string to its corresponding numeric representation. Declaration public static long IpAddressToNumber(string address) Parameters Type Name Description string address The IP address string to convert. Returns Type Description long The numeric representation of the IP address. IsValid(string) Checks if the provided IP address is valid. Declaration public static bool IsValid(string ipAddress) Parameters Type Name Description string ipAddress The IP address to validate. Returns Type Description bool True if the IP address is valid; otherwise, false. IsValidIpv4(string) Checks if the provided IP address is a valid IPv4 address. Declaration public static bool IsValidIpv4(string ipAddress) Parameters Type Name Description string ipAddress The IP address to validate. Returns Type Description bool True if the IP address is a valid IPv4 address; otherwise, false. IsValidIpv6(string) Checks if the provided IP address is a valid IPv6 address. Declaration public static bool IsValidIpv6(string ipAddress) Parameters Type Name Description string ipAddress The IP address to validate. Returns Type Description bool True if the IP address is a valid IPv6 address; otherwise, false. NumberToIpAddress(long) Converts a numeric IP address representation to its corresponding string representation. Declaration public static string NumberToIpAddress(long address) Parameters Type Name Description long address The numeric IP address to convert. Returns Type Description string The string representation of the IP address."
  },
  "api/mk.helpers.ListExtensions.html": {
    "href": "api/mk.helpers.ListExtensions.html",
    "title": "Class ListExtensions | mk.helpers API",
    "summary": "Class ListExtensions Provides extension methods for working with lists and collections. Inheritance object ListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class ListExtensions Methods AddRange<T>(List<T>, params T[]) Adds a range of items to the end of the list. Declaration public static void AddRange<T>(this List<T> list, params T[] items) Parameters Type Name Description List<T> list The list to which items are added. T[] items The items to be added. Type Parameters Name Description T The type of elements in the list. Batch<T>(IEnumerable<T>, int) Batches the elements of a sequence into smaller sequences of a specified maximum size. Declaration public static IEnumerable<IEnumerable<T>> Batch<T>(this IEnumerable<T> items, int maxItems) Parameters Type Name Description IEnumerable<T> items The sequence to be batched. int maxItems The maximum number of items in each batch. Returns Type Description IEnumerable<IEnumerable<T>> An IEnumerable of batches containing items from the input sequence. Type Parameters Name Description T The type of elements in the sequence. Batch<T>(IQueryable<T>, int) Batches the elements of an IQueryable collection into smaller sequences of a specified size. Declaration public static IEnumerable<IQueryable<T>> Batch<T>(this IQueryable<T> collection, int size) Parameters Type Name Description IQueryable<T> collection The IQueryable collection to be batched. int size The size of each batch. Returns Type Description IEnumerable<IQueryable<T>> An IEnumerable of IQueryable batches from the input collection. Type Parameters Name Description T The type of elements in the collection. Combinations<T>(List<T>) Generates all combinations of the elements in the list. Declaration public static List<List<T>> Combinations<T>(this List<T> list) Parameters Type Name Description List<T> list The list for which combinations are generated. Returns Type Description List<List<T>> A List of Lists representing all combinations of the list's elements. Type Parameters Name Description T The type of elements in the list. Denullify<T>(IEnumerable<T>) Removes null elements from the IEnumerable. Declaration public static IEnumerable<T> Denullify<T>(this IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The IEnumerable containing elements to be filtered. Returns Type Description IEnumerable<T> An IEnumerable with null elements removed. Type Parameters Name Description T The type of elements in the IEnumerable. Median<T>(IEnumerable<T>) Computes the median of a sequence of numbers. Declaration public static T Median<T>(this IEnumerable<T> source) where T : struct, IComparable Parameters Type Name Description IEnumerable<T> source The sequence of numbers. Returns Type Description T The median value, returned as the same type as the input. Type Parameters Name Description T The numeric type of the elements in the sequence. Supported types are decimal, double, int, etc. Exceptions Type Condition InvalidOperationException Thrown if the source sequence is null or empty. Mode<T>(IEnumerable<T>) Computes the mode(s) of a sequence of elements, i.e., the element(s) that appear most frequently. Declaration public static IEnumerable<T> Mode<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable<T> source The sequence of elements. Returns Type Description IEnumerable<T> An IEnumerable containing the mode(s) of the sequence. If there is more than one mode, all modes are returned; if no mode exists (all elements are unique), all elements are returned. Type Parameters Name Description T The type of the elements in the sequence. Exceptions Type Condition InvalidOperationException Thrown if the source sequence is null or empty. Permutations<T>(List<T>) Generates all permutations of the elements in the list. Declaration public static List<List<T>> Permutations<T>(this List<T> list) Parameters Type Name Description List<T> list The list for which permutations are generated. Returns Type Description List<List<T>> A List of Lists representing all permutations of the list's elements. Type Parameters Name Description T The type of elements in the list. Permutations<T>(List<T>, int) Generates permutations of a specified length from the elements in the list. Declaration public static List<List<T>> Permutations<T>(this List<T> list, int length) Parameters Type Name Description List<T> list The list for which permutations are generated. int length The length of permutations to generate. Returns Type Description List<List<T>> A List of Lists representing permutations of the specified length. Type Parameters Name Description T The type of elements in the list."
  },
  "api/mk.helpers.ObjectExtensions.html": {
    "href": "api/mk.helpers.ObjectExtensions.html",
    "title": "Class ObjectExtensions | mk.helpers API",
    "summary": "Class ObjectExtensions Provides extension methods for object manipulation. Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class ObjectExtensions Methods AsDictionary(object) Converts an object's public properties to a dictionary. Declaration public static IDictionary<string, object> AsDictionary(this object obj) Parameters Type Name Description object obj The object to convert. Returns Type Description IDictionary<string, object> A dictionary containing the object's property names and values. IsDefault<T>(T) Determines whether the specified object is the default value for its type. Declaration public static bool IsDefault<T>(this T obj) Parameters Type Name Description T obj The object to check. Returns Type Description bool true if the object is the default value; otherwise, false. Type Parameters Name Description T The type of the object. IsIn<T>(T, params T[]) Determines whether the specified object is contained in the given set of values. Declaration public static bool IsIn<T>(this T obj, params T[] values) Parameters Type Name Description T obj The object to check. T[] values The set of values to check against. Returns Type Description bool true if the object is in the set of values; otherwise, false. Type Parameters Name Description T The type of the object. ToExpandoObject(object) Converts an object into an ExpandoObject, copying all its properties. Complex types and collections are recursively converted. Declaration public static ExpandoObject ToExpandoObject(this object obj) Parameters Type Name Description object obj The object to convert to ExpandoObject. Returns Type Description ExpandoObject An ExpandoObject representing the original object's properties. Returns null if the input object is null."
  },
  "api/mk.helpers.ParallelHelper.html": {
    "href": "api/mk.helpers.ParallelHelper.html",
    "title": "Class ParallelHelper | mk.helpers API",
    "summary": "Class ParallelHelper Provides utility methods for parallel execution using the Parallel.ForEach pattern. Inheritance object ParallelHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class ParallelHelper Methods While(Func<bool>, ParallelOptions, Action) Executes the specified body action in parallel as long as the specified condition returns true. Declaration public static void While(Func<bool> condition, ParallelOptions options, Action body) Parameters Type Name Description Func<bool> condition A function that returns a boolean value indicating whether the loop should continue. ParallelOptions options The ParallelOptions that configure the parallel execution. Action body The action to be executed in parallel."
  },
  "api/mk.helpers.PerfTimer.html": {
    "href": "api/mk.helpers.PerfTimer.html",
    "title": "Class PerfTimer | mk.helpers API",
    "summary": "Class PerfTimer A performance timer that measures the elapsed time for different actions and intervals. Inheritance object PerfTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public class PerfTimer Constructors PerfTimer() Initializes a new instance of the PerfTimer class with default settings (enabled). Declaration public PerfTimer() PerfTimer(bool) Initializes a new instance of the PerfTimer class with the specified enabled status. Declaration public PerfTimer(bool enabled) Parameters Type Name Description bool enabled True to enable the timer, false to disable it. Properties AllTimes Gets a collection of all recorded action times. Declaration public ICollection<TimeSpan> AllTimes { get; } Property Value Type Description ICollection<TimeSpan> AllTimesElapsed Gets the sum of all recorded action times. Declaration public TimeSpan AllTimesElapsed { get; } Property Value Type Description TimeSpan Elapsed Gets the elapsed time for the current action (since Start() was called). Declaration public TimeSpan Elapsed { get; } Property Value Type Description TimeSpan Methods AddCheckpoint(string) Add new checkpoint (store name, time). Timer is not reset! Declaration public PerfTimer AddCheckpoint(string name) Parameters Type Name Description string name name of the checkpoint Returns Type Description PerfTimer The PerfTimer instance for method chaining. AddCheckpoint(string, TimeSpan) Add new checkpoint (store name, time). timer is not effected. Declaration public PerfTimer AddCheckpoint(string name, TimeSpan timeSpan) Parameters Type Name Description string name name of the checkpoint TimeSpan timeSpan timespan to store Returns Type Description PerfTimer The PerfTimer instance for method chaining. Clear() Clears all recorded action times, checkpoints will remain the same. Declaration public void Clear() ClearCheckpoints() Clears all recorded checkpoints. Declaration public PerfTimer ClearCheckpoints() Returns Type Description PerfTimer Execute(Action) Executes the specified action and records the elapsed time if the timer is enabled. Declaration public PerfTimer Execute(Action action) Parameters Type Name Description Action action The action to be executed. Returns Type Description PerfTimer The PerfTimer instance for method chaining. ExecuteWithCheckpoint(string, Action) Executes the specified action and records the elapsed time in a checkpoint. the timer is not effected and continues to run / keep its current state. Declaration public PerfTimer ExecuteWithCheckpoint(string name, Action action) Parameters Type Name Description string name name of the checkpoint Action action The action to be executed. Returns Type Description PerfTimer The PerfTimer instance for method chaining. GetCheckpoint(string) Get the timespan of a saved checkpoint, default is TimeSpan.Zero Declaration public TimeSpan GetCheckpoint(string name) Parameters Type Name Description string name name of the checkpoint Returns Type Description TimeSpan GetCheckpoints() Gets a collection of all recorded checkpoints. Declaration public IDictionary<string, TimeSpan> GetCheckpoints() Returns Type Description IDictionary<string, TimeSpan> Interval() Stops the timer, records the elapsed time, and starts the timer again. Used to measure intervals between actions. This does not clear checkpoints. Declaration public PerfTimer Interval() Returns Type Description PerfTimer The PerfTimer instance for method chaining. RemoveCheckpoint(string) Removes a checkpoint Declaration public PerfTimer RemoveCheckpoint(string name) Parameters Type Name Description string name name of the checkpoint Returns Type Description PerfTimer Reset() Resets the timer to measure the elapsed time for the next action. Declaration public PerfTimer Reset() Returns Type Description PerfTimer The PerfTimer instance for method chaining. Start() Starts the timer to measure the elapsed time for an action. Declaration public PerfTimer Start() Returns Type Description PerfTimer The PerfTimer instance for method chaining. StartNew() Create new instance of PerfTimer and start it Declaration public static PerfTimer StartNew() Returns Type Description PerfTimer Stop() Stops the timer and records the elapsed time for the completed action. Declaration public PerfTimer Stop() Returns Type Description PerfTimer The PerfTimer instance for method chaining. Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.QueueExtensions.html": {
    "href": "api/mk.helpers.QueueExtensions.html",
    "title": "Class QueueExtensions | mk.helpers API",
    "summary": "Class QueueExtensions Provides extension methods for working with queues. Inheritance object QueueExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class QueueExtensions Methods DequeueChunk<T>(ConcurrentQueue<T>, int) Dequeues a chunk of items from a ConcurrentQueue<T> with the specified chunk size. Declaration public static List<T> DequeueChunk<T>(this ConcurrentQueue<T> queue, int chunkSize) Parameters Type Name Description ConcurrentQueue<T> queue The concurrent queue from which to dequeue. int chunkSize The number of items to dequeue in each chunk. Returns Type Description List<T> A list containing the dequeued items. Type Parameters Name Description T The type of elements in the queue. DequeueChunk<T>(Queue<T>, int) Dequeues a chunk of items from a Queue<T> with the specified chunk size. Declaration public static IEnumerable<T> DequeueChunk<T>(this Queue<T> queue, int chunkSize) Parameters Type Name Description Queue<T> queue The queue from which to dequeue. int chunkSize The number of items to dequeue in each chunk. Returns Type Description IEnumerable<T> An enumerable containing the dequeued items. Type Parameters Name Description T The type of elements in the queue."
  },
  "api/mk.helpers.RandomHelper.html": {
    "href": "api/mk.helpers.RandomHelper.html",
    "title": "Class RandomHelper | mk.helpers API",
    "summary": "Class RandomHelper Provides utility methods for generating random values. Inheritance object RandomHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class RandomHelper Methods RandomBool() Generates a random boolean value (true or false). Declaration public static bool RandomBool() Returns Type Description bool A randomly generated boolean value. RandomDate() Generates a random DateTime within the default date range. Declaration public static DateTime RandomDate() Returns Type Description DateTime A randomly generated DateTime value. RandomDate(DateTime, DateTime) Generates a random DateTime within the specified date range. Declaration public static DateTime RandomDate(DateTime from, DateTime to) Parameters Type Name Description DateTime from The minimum date of the range. DateTime to The maximum date of the range. Returns Type Description DateTime A randomly generated DateTime within the specified range. RandomDouble() Generates a random double between 0.0 and 1.0. Declaration public static double RandomDouble() Returns Type Description double A randomly generated double value. RandomInt(int, int) Generates a random integer within the specified range. Declaration public static int RandomInt(int min, int max) Parameters Type Name Description int min The minimum value of the random integer. int max The maximum value of the random integer. Returns Type Description int A randomly generated integer. RandomNumber(int, int, int) Generates a random number within the specified range with the specified number of digits. Declaration public static double RandomNumber(int min, int max, int digits) Parameters Type Name Description int min The minimum value of the random number. int max The maximum value of the random number. int digits The number of decimal digits in the generated number. Returns Type Description double A randomly generated number with the specified number of digits. RandomString(int, bool) Generates a random string of the specified size. Declaration public static string RandomString(int size, bool lowerCase) Parameters Type Name Description int size The length of the random string to generate. bool lowerCase Specify whether the generated string should be in lowercase. Returns Type Description string A randomly generated string."
  },
  "api/mk.helpers.ReflectionHelper.html": {
    "href": "api/mk.helpers.ReflectionHelper.html",
    "title": "Class ReflectionHelper | mk.helpers API",
    "summary": "Class ReflectionHelper Provides utility methods for reflection-related operations. Inheritance object ReflectionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class ReflectionHelper Methods Changes(object, object) Determines the changes between two objects and returns a list of EntityChange instances. Declaration public static List<EntityChange> Changes(this object oldEntity, object newEntity) Parameters Type Name Description object oldEntity The old object. object newEntity The new object. Returns Type Description List<EntityChange> A list of EntityChange instances representing the changes. CopyProperties(object, object, out List<EntityChange>) Copies the properties from the source object to the destination object and captures the changes made. Declaration public static void CopyProperties(this object source, object destination, out List<EntityChange> changes) Parameters Type Name Description object source The source object. object destination The destination object. List<EntityChange> changes The list of changes made during copying. CopyProperties(object, object, out List<EntityChange>, params string[]) Copies the properties from the source object to the destination object, ignoring specified properties, and captures the changes made. Declaration public static void CopyProperties(this object source, object destination, out List<EntityChange> changes, params string[] ignore) Parameters Type Name Description object source The source object. object destination The destination object. List<EntityChange> changes The list of changes made during copying. string[] ignore An array of property names to ignore during copying. CopyProperties(object, object, params string[]) Copies the properties from the source object to the destination object, ignoring specified properties. Declaration public static void CopyProperties(this object source, object destination, params string[] ignore) Parameters Type Name Description object source The source object. object destination The destination object. string[] ignore An array of property names to ignore during copying. CopyPropertiesFrom(object, object, out List<EntityChange>) Copies the properties from the source object to the destination object and returns the changes made. Declaration public static void CopyPropertiesFrom(this object source, object destination, out List<EntityChange> changes) Parameters Type Name Description object source The source object. object destination The destination object. List<EntityChange> changes The list of changes made during copying. CopyPropertiesFrom(object, object, params string[]) Copies the properties from the source object to the destination object, ignoring specified properties. Declaration public static void CopyPropertiesFrom(this object source, object destination, params string[] ignore) Parameters Type Name Description object source The source object. object destination The destination object. string[] ignore An array of property names to ignore during copying. DeepClone<T>(T) Creates a deep clone of the provided object using JSON serialization. Declaration public static T DeepClone<T>(this T obj) Parameters Type Name Description T obj The object to be cloned. Returns Type Description T The deep-cloned object. Type Parameters Name Description T The type of the object to clone. GetUnderlyingType(MemberInfo) Retrieves the underlying type of a member (event, field, method, or property). Declaration public static Type GetUnderlyingType(this MemberInfo member) Parameters Type Name Description MemberInfo member The member to retrieve the underlying type for. Returns Type Description Type The underlying type of the member. IsPrimitive(Type) Checks if the provided type is a primitive type. Declaration public static bool IsPrimitive(this Type type) Parameters Type Name Description Type type The type to check. Returns Type Description bool true if the type is a primitive type; otherwise, false. IsSimpleType(Type) Checks if the provided type is a simple type (value type, primitive type, or simple reference type). Declaration public static bool IsSimpleType(this Type type) Parameters Type Name Description Type type The type to be checked. Returns Type Description bool true if the type is a simple type; otherwise, false. PublicPropertiesEqual<T>(T, T, params string[]) Compares the public properties of two objects of the same type and checks if they are equal. Declaration public static bool PublicPropertiesEqual<T>(this T self, T to, params string[] ignore) where T : class Parameters Type Name Description T self The first object. T to The second object. string[] ignore A list of property names to ignore during comparison. Returns Type Description bool true if the public properties are equal; otherwise, false. Type Parameters Name Description T The type of the objects to compare."
  },
  "api/mk.helpers.Serialization.html": {
    "href": "api/mk.helpers.Serialization.html",
    "title": "Class Serialization | mk.helpers API",
    "summary": "Class Serialization Provides methods for data serialization and deserialization using JSON and BSON formats. Inheritance object Serialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class Serialization Methods Deserialize<T>(byte[], SerializationType) Deserializes the provided byte array into an object of the specified type using the specified serialization format. Declaration public static T Deserialize<T>(byte[] data, SerializationType type) where T : class Parameters Type Name Description byte[] data The byte array to be deserialized. SerializationType type The serialization format to use. Returns Type Description T The deserialized object of the specified type. Type Parameters Name Description T The type of the object to be deserialized. FromBsonBytes<T>(byte[]) Converts a BSON byte array to an object of the specified type. Declaration public static T FromBsonBytes<T>(byte[] obj) where T : class Parameters Type Name Description byte[] obj The BSON byte array to be deserialized. Returns Type Description T The deserialized object of the specified type. Type Parameters Name Description T The type of the object to be deserialized from BSON. FromBson<T>(string) Converts a BSON string to an object of the specified type. Declaration public static T FromBson<T>(string value) Parameters Type Name Description string value The BSON string to be deserialized. Returns Type Description T The deserialized object of the specified type. Type Parameters Name Description T The type of the object to be deserialized from BSON. FromJsonBytes<T>(byte[]) Converts a JSON byte array to an object of the specified type. Declaration public static T FromJsonBytes<T>(byte[] obj) where T : class Parameters Type Name Description byte[] obj The JSON byte array to be deserialized. Returns Type Description T The deserialized object of the specified type. Type Parameters Name Description T The type of the object to be deserialized from JSON. FromJson<T>(string) Converts a JSON string to an object of the specified type. Declaration public static T FromJson<T>(string obj) Parameters Type Name Description string obj The JSON string to be deserialized. Returns Type Description T The deserialized object of the specified type. Type Parameters Name Description T The type of the object to be deserialized from JSON. Serialize<T>(T, SerializationType) Serializes the provided data into a byte array using the specified serialization format. Declaration public static byte[] Serialize<T>(T data, SerializationType type) where T : class Parameters Type Name Description T data The data to be serialized. SerializationType type The serialization format to use. Returns Type Description byte[] The serialized data as a byte array. Type Parameters Name Description T The type of the data being serialized. SetEncoding(Encoding) Sets the encoding to be used for serialization and deserialization. Declaration public static void SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The encoding to be set. If null, the default encoding will be used. ToBsonBytes<T>(T) Converts an object to its BSON representation as a byte array. Declaration public static byte[] ToBsonBytes<T>(T value) where T : class Parameters Type Name Description T value The object to be converted. Returns Type Description byte[] The BSON representation of the object as a byte array. Type Parameters Name Description T The type of the object to be converted to BSON. ToBson<T>(T) Converts an object to its BSON representation as a string. Declaration public static string ToBson<T>(T value) where T : class Parameters Type Name Description T value The object to be converted. Returns Type Description string The BSON representation of the object as a string. Type Parameters Name Description T The type of the object to be converted to BSON. ToJsonBytes<T>(T) Converts an object to its JSON representation as a byte array. Declaration public static byte[] ToJsonBytes<T>(T value) where T : class Parameters Type Name Description T value The object to be converted. Returns Type Description byte[] The JSON representation of the object as a byte array. Type Parameters Name Description T The type of the object to be converted to JSON. ToJson<T>(T) Converts an object to its JSON representation. Declaration public static string ToJson<T>(T obj) Parameters Type Name Description T obj The object to be converted. Returns Type Description string The JSON representation of the object. Type Parameters Name Description T The type of the object to be converted to JSON."
  },
  "api/mk.helpers.StaticData.html": {
    "href": "api/mk.helpers.StaticData.html",
    "title": "Class StaticData | mk.helpers API",
    "summary": "Class StaticData A static class for managing and retrieving static data stored in a dictionary. Inheritance object StaticData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class StaticData Methods Add(Dictionary<string, string>) Adds a dictionary of key-value pairs to the static data dictionary. Declaration public static void Add(Dictionary<string, string> data) Parameters Type Name Description Dictionary<string, string> data A dictionary of key-value pairs to be added. Add(KeyValuePair<string, string>[]) Adds an array of key-value pairs to the static data dictionary. Declaration public static void Add(KeyValuePair<string, string>[] keyValuePairs) Parameters Type Name Description KeyValuePair<string, string>[] keyValuePairs An array of key-value pairs to be added. Add(string, string) Adds or updates a key-value pair in the static data dictionary. Declaration public static void Add(string key, string value) Parameters Type Name Description string key The key of the data. string value The value of the data. AddObject<T>(string, T) Adds or updates an object of type T in the static data dictionary. Declaration public static void AddObject<T>(string key, T value) where T : class Parameters Type Name Description string key The key of the data. T value The object value to be added. Type Parameters Name Description T The type of object to be added. Get(string) Retrieves the value associated with the specified key from the static data dictionary. Declaration public static string Get(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description string The value associated with the specified key, or null if the key does not exist. GetBoolean(string) Retrieves the Boolean value associated with the specified key from the static data dictionary. Declaration public static bool GetBoolean(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description bool The Boolean value associated with the specified key, or false if the key does not exist or is not a valid Boolean. GetDecimal(string) Retrieves the Decimal value associated with the specified key from the static data dictionary. Declaration public static decimal? GetDecimal(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description decimal? The Decimal value associated with the specified key, or null if the key does not exist or is not a valid Decimal. GetInt(string) Retrieves the integer value associated with the specified key from the static data dictionary. Declaration public static int? GetInt(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description int? The integer value associated with the specified key, or null if the key does not exist or is not a valid integer. GetInt16(string) Retrieves the Int16 value associated with the specified key from the static data dictionary. Declaration public static short? GetInt16(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description short? The Int16 value associated with the specified key, or null if the key does not exist or is not a valid Int16. GetInt32(string) Retrieves the Int32 value associated with the specified key from the static data dictionary. Declaration public static int? GetInt32(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description int? The Int32 value associated with the specified key, or null if the key does not exist or is not a valid Int32. GetInt64(string) Retrieves the Int64 value associated with the specified key from the static data dictionary. Declaration public static long? GetInt64(string key) Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description long? The Int64 value associated with the specified key, or null if the key does not exist or is not a valid Int64. GetObject<T>(string) Retrieves the object of type T associated with the specified key from the static data dictionary. Declaration public static T GetObject<T>(string key) where T : class Parameters Type Name Description string key The key of the data to retrieve. Returns Type Description T The object of type T associated with the specified key, or null if the key does not exist or if deserialization fails. Type Parameters Name Description T The type of object to retrieve."
  },
  "api/mk.helpers.Store.InMemoryStore.html": {
    "href": "api/mk.helpers.Store.InMemoryStore.html",
    "title": "Class InMemoryStore | mk.helpers API",
    "summary": "Class InMemoryStore Inheritance object InMemoryStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Store Assembly: mk.helpers.dll Syntax public static class InMemoryStore Methods GetExpiry(string) Gets the remaining time until the value associated with the given key expires. Declaration public static TimeSpan? GetExpiry(string key) Parameters Type Name Description string key Returns Type Description TimeSpan? Get<T>(string, Func<T>?) Gets the value associated with the given key. Generates and sets a value if the key is not found. Declaration public static T Get<T>(string key, Func<T>? setOnNull = null) Parameters Type Name Description string key Func<T> setOnNull Returns Type Description T Type Parameters Name Description T Get<T>(string, T) Gets the value associated with the given key. Returns a default value if the key is not found. Declaration public static T Get<T>(string key, T setOnNull) Parameters Type Name Description string key T setOnNull Returns Type Description T Type Parameters Name Description T Invalidate(string) Invalidates and removes the value associated with the given key from the store. Returns true if the key was found and removed, false otherwise. Declaration public static bool Invalidate(string key) Parameters Type Name Description string key Returns Type Description bool InvalidateAll() Invalidates and removes all key-value pairs from the store. Declaration public static void InvalidateAll() Set<T>(string, T, TimeSpan?) Sets a value in the store with the specified key and optional expiry time. Declaration public static void Set<T>(string key, T value, TimeSpan? expiry = null) Parameters Type Name Description string key T value TimeSpan? expiry Type Parameters Name Description T TotalEntries() Returns the total number of key-value pairs currently stored in the store after cleaning up expired entries. Declaration public static int TotalEntries() Returns Type Description int"
  },
  "api/mk.helpers.Store.StoreValue.html": {
    "href": "api/mk.helpers.Store.StoreValue.html",
    "title": "Class StoreValue | mk.helpers API",
    "summary": "Class StoreValue Inheritance object StoreValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Store Assembly: mk.helpers.dll Syntax [Serializable] public class StoreValue Properties ExpiresOn Declaration public DateTime? ExpiresOn { get; set; } Property Value Type Description DateTime? Value Declaration public object Value { get; set; } Property Value Type Description object Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Store.html": {
    "href": "api/mk.helpers.Store.html",
    "title": "Namespace mk.helpers.Store | mk.helpers API",
    "summary": "Namespace mk.helpers.Store Classes InMemoryStore StoreValue"
  },
  "api/mk.helpers.StreamExtensions.html": {
    "href": "api/mk.helpers.StreamExtensions.html",
    "title": "Class StreamExtensions | mk.helpers API",
    "summary": "Class StreamExtensions Provides extension methods for working with streams. Inheritance object StreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class StreamExtensions Methods ReadExactly(Stream, int, int) Reads exactly the specified number of bytes from the stream. Declaration public static byte[] ReadExactly(this Stream stream, int count, int pos = 0) Parameters Type Name Description Stream stream The input stream. int count The number of bytes to read. int pos The position from which to start reading. Default is 0. Returns Type Description byte[] The byte array containing the read bytes. ReadImageFormatFromHeader(Stream) Reads the image format from the header of the input stream. Declaration public static ImageFormat ReadImageFormatFromHeader(this Stream input) Parameters Type Name Description Stream input The input stream. Returns Type Description ImageFormat The detected image format or ImageFormat.None if no match is found."
  },
  "api/mk.helpers.StringExtensions.html": {
    "href": "api/mk.helpers.StringExtensions.html",
    "title": "Class StringExtensions | mk.helpers API",
    "summary": "Class StringExtensions Provides extension methods for string manipulation and formatting. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class StringExtensions Methods BytesToString(long) Converts a byte count to a human-readable string representation with appropriate unit suffix. Declaration public static string BytesToString(this long byteCount) Parameters Type Name Description long byteCount The byte count. Returns Type Description string The human-readable string representation of the byte count. ComputeSimilarityLevenshtein(string, string) Computes the Levenshtein similarity between two strings. Declaration public static double ComputeSimilarityLevenshtein(this string source, string target) Parameters Type Name Description string source The source string. string target The target string. Returns Type Description double The Levenshtein similarity between the two strings. ConvertCapsToWords(string) Converts camel case or Pascal case string to words with spaces between uppercase letters. Declaration public static string ConvertCapsToWords(this string str) Parameters Type Name Description string str The input string in camel case or Pascal case. Returns Type Description string The input string with spaces added between uppercase letters. GetDaySuffix(int) Gets the appropriate suffix for a day based on its numeric value. Declaration public static string GetDaySuffix(this int day) Parameters Type Name Description int day The day value. Returns Type Description string The day suffix (st, nd, rd, or th). IsNullOrEmpty(string) Determines whether the specified string is null or empty. Declaration public static bool IsNullOrEmpty(this string str) Parameters Type Name Description string str The input string. Returns Type Description bool true if the string is null or empty; otherwise, false. IsNullOrWhiteSpace(string) Determines whether the specified string is null, empty, or consists only of white-space characters. Declaration public static bool IsNullOrWhiteSpace(this string str) Parameters Type Name Description string str The input string. Returns Type Description bool true if the string is null, empty, or consists only of white-space characters; otherwise, false. KiloFormat(decimal) Formats an integer as a string with Kilo notation (e.g., 1.5K). Declaration public static string KiloFormat(this decimal num) Parameters Type Name Description decimal num The input integer. Returns Type Description string A string with Kilo notation. KiloFormat(int) Formats an integer as a string with Kilo notation (e.g., 1.5K). Declaration public static string KiloFormat(this int num) Parameters Type Name Description int num The input integer. Returns Type Description string A string with Kilo notation. NormalizePostcode(string) Normalizes a postcode by converting it to uppercase and adding spaces where appropriate. Declaration public static string NormalizePostcode(this string postcode) Parameters Type Name Description string postcode The input postcode string. Returns Type Description string The normalized version of the input postcode. RemoveAccent(string) Removes accents from a string using Cyrillic encoding and converts to ASCII encoding. Declaration public static string RemoveAccent(this string txt) Parameters Type Name Description string txt The input string. Returns Type Description string The string with accents removed and converted to ASCII encoding. ReplaceStart(string, string, string) Replaces a specified substring at the start of the target string with a replacement string. Declaration public static string ReplaceStart(this string str, string start, string replacement) Parameters Type Name Description string str The target string. string start The substring to be replaced at the start of the target. string replacement The replacement string. Returns Type Description string The modified string after replacing the specified substring at the start. ToBase64(string, Encoding) Short hand method to convert a string to base64 encoded string Declaration public static string ToBase64(this string str, Encoding encoding = null) Parameters Type Name Description string str Input string Encoding encoding The type of text encoding to use. Defaults to Encoding.UTF8 Returns Type Description string ToBase64Bytes(string, Encoding) Short hand method to convert a string to base64 encoded bytes Declaration public static byte[] ToBase64Bytes(this string str, Encoding encoding = null) Parameters Type Name Description string str Input string Encoding encoding The type of text encoding to use. Defaults to Encoding.UTF8 Returns Type Description byte[] ToBytesAscii(string) Converts a string to a byte array using ASCII encoding. Declaration public static byte[] ToBytesAscii(this string str) Parameters Type Name Description string str The input string. Returns Type Description byte[] The byte array representation of the input string using ASCII encoding. ToBytesUnicode(string) Converts a string to a byte array using Unicode encoding (UTF-16). Declaration public static byte[] ToBytesUnicode(this string str) Parameters Type Name Description string str The input string. Returns Type Description byte[] The byte array representation of the input string using Unicode encoding (UTF-16). ToBytesUtf32(string) Converts a string to a byte array using UTF-32 encoding. Declaration public static byte[] ToBytesUtf32(this string str) Parameters Type Name Description string str The input string. Returns Type Description byte[] The byte array representation of the input string using UTF-32 encoding. ToBytesUtf7(string) Converts a string to a byte array using UTF-7 encoding. Declaration public static byte[] ToBytesUtf7(this string str) Parameters Type Name Description string str The input string. Returns Type Description byte[] The byte array representation of the input string using UTF-7 encoding. ToBytesUtf8(string) Converts a string to a byte array using UTF-8 encoding. Declaration public static byte[] ToBytesUtf8(this string str) Parameters Type Name Description string str The input string. Returns Type Description byte[] The byte array representation of the input string using UTF-8 encoding. ToHtml(string) Converts a string to its HTML representation with line breaks and non-breaking spaces. Declaration public static string ToHtml(this string text) Parameters Type Name Description string text The input string. Returns Type Description string The HTML-encoded string with line breaks and non-breaking spaces. ToKMB(decimal) Converts a decimal number to a formatted string with K, M, or B suffix. Declaration public static string ToKMB(this decimal num) Parameters Type Name Description decimal num The input decimal number. Returns Type Description string A formatted string with K, M, or B suffix. ToKMB(string) Converts a string representation of a number to a formatted string with K, M, or B suffix. Declaration public static string ToKMB(this string data) Parameters Type Name Description string data The input string containing the number. Returns Type Description string A formatted string with K, M, or B suffix. ToSlug(string) Converts a string to a URL-friendly slug. Declaration public static string ToSlug(this string phrase) Parameters Type Name Description string phrase The input string. Returns Type Description string The URL-friendly slug version of the input string. ToTitleCase(string) Converts a string to title case using the current thread's culture. Declaration public static string ToTitleCase(this string str) Parameters Type Name Description string str The input string. Returns Type Description string The input string converted to title case. ToTitleCase(string, CultureInfo) Converts a string to title case using the specified culture. Declaration public static string ToTitleCase(this string str, CultureInfo cultureInfo) Parameters Type Name Description string str The input string. CultureInfo cultureInfo The culture to use for title case conversion. Returns Type Description string The input string converted to title case using the specified culture. ToTitleCase(string, string) Converts a string to title case using the specified culture. Declaration public static string ToTitleCase(this string str, string cultureInfoName) Parameters Type Name Description string str The input string. string cultureInfoName The name of the culture to use. Returns Type Description string The input string converted to title case using the specified culture. ToUpperCase(string) Converts a string to uppercase. Declaration public static string ToUpperCase(this string str) Parameters Type Name Description string str The input string. Returns Type Description string The input string converted to uppercase. TrimEnd(string, string) Removes a specified substring from the end of the target string. Declaration public static string TrimEnd(this string target, string trimString) Parameters Type Name Description string target The target string. string trimString The substring to be removed from the end. Returns Type Description string The modified string after trimming the specified substring from the end. TrimStart(string, string) Removes a specified substring from the start of the target string. Declaration public static string TrimStart(this string target, string trimString) Parameters Type Name Description string target The target string. string trimString The substring to be removed from the start. Returns Type Description string The modified string after trimming the specified substring from the start."
  },
  "api/mk.helpers.TempStream.html": {
    "href": "api/mk.helpers.TempStream.html",
    "title": "Class TempStream | mk.helpers API",
    "summary": "Class TempStream A temporary file stream that tries to use a file stream in the temp folder, but falls back to a memory stream if that fails. Will delete the file on dispose unless specified otherwise. Inheritance object MarshalByRefObject Stream TempStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public class TempStream : Stream, IAsyncDisposable, IDisposable Constructors TempStream(bool) Declaration public TempStream(bool keepFileOnDispose = false) Parameters Type Name Description bool keepFileOnDispose Fields InnerStream Gets the inner stream. Declaration public readonly Stream InnerStream Field Value Type Description Stream Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite IsFileStream Gets a value indicating whether the stream is a file stream. Declaration public bool IsFileStream { get; } Property Value Type Description bool IsMemoryStream Gets a value indicating whether the stream is a memory stream. Declaration public bool IsMemoryStream { get; } Property Value Type Description bool Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(bool) Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. Implements IAsyncDisposable IDisposable Extension Methods StreamExtensions.ReadExactly(Stream, int, int) StreamExtensions.ReadImageFormatFromHeader(Stream) ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.ThreadLord-1.LordState.html": {
    "href": "api/mk.helpers.ThreadLord-1.LordState.html",
    "title": "Enum ThreadLord<T>.LordState | mk.helpers API",
    "summary": "Enum ThreadLord<T>.LordState Represents the state of the ThreadLord instance. Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public enum ThreadLord<T>.LordState Fields Name Description Running Stopped Stopping Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<ThreadLord<T>.LordState>(ThreadLord<T>.LordState) ObjectExtensions.IsIn<ThreadLord<T>.LordState>(ThreadLord<T>.LordState, params ThreadLord<T>.LordState[]) ReflectionHelper.DeepClone<ThreadLord<T>.LordState>(ThreadLord<T>.LordState) EnumerableExtensions.IsAnyOf<ThreadLord<T>.LordState>(ThreadLord<T>.LordState, params ThreadLord<T>.LordState[]) EnumerableExtensions.Yield<ThreadLord<T>.LordState>(ThreadLord<T>.LordState)"
  },
  "api/mk.helpers.ThreadLord-1.html": {
    "href": "api/mk.helpers.ThreadLord-1.html",
    "title": "Class ThreadLord<T> | mk.helpers API",
    "summary": "Class ThreadLord<T> Process a collection of tasks as fast as possible using a thread pool. Inheritance object ThreadLord<T> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public class ThreadLord<T> : IDisposable Type Parameters Name Description T The type of tasks to process. Constructors ThreadLord(Action<T>) Initializes a new instance of the ThreadLord class with a default maximum thread count. Declaration public ThreadLord(Action<T> onWork) Parameters Type Name Description Action<T> onWork The callback action for processing tasks. ThreadLord(Action<T>, int) Initializes a new instance of the ThreadLord class with a specified maximum thread count. Declaration public ThreadLord(Action<T> onWork, int maxThreads) Parameters Type Name Description Action<T> onWork The callback action for processing tasks. int maxThreads The maximum number of worker threads. Properties CurrentlyProcessing Gets the number of worker threads currently processing tasks. Declaration public long CurrentlyProcessing { get; } Property Value Type Description long Enqueued Gets the number of tasks currently enqueued. Declaration public long Enqueued { get; } Property Value Type Description long Failed Gets the total number of failed tasks. Declaration public long Failed { get; } Property Value Type Description long Processed Gets the total number of processed tasks. Declaration public long Processed { get; } Property Value Type Description long ProcessedLastSecond Gets the count of tasks processed in the last second. Declaration public long ProcessedLastSecond { get; } Property Value Type Description long ProcessedPerSecondAverage Gets the average number of tasks processed per second. Declaration public long ProcessedPerSecondAverage { get; } Property Value Type Description long QueueLimit Gets the queue size limit. Declaration public long QueueLimit { get; } Property Value Type Description long State Gets the current state of the ThreadLord instance. Declaration public ThreadLord<T>.LordState State { get; } Property Value Type Description ThreadLord<T>.LordState Workers Gets the number of worker threads currently active. Declaration public long Workers { get; } Property Value Type Description long Methods Clear() Clears all tasks from the queue. Declaration public void Clear() Dispose() Disposes of the ThreadLord instance and stops processing. Declaration public void Dispose() Enqueue(T) Enqueues a task to be processed. Declaration public void Enqueue(T data) Parameters Type Name Description T data The task data to enqueue. LimitQueue(int) Sets the maximum size of the task queue. Declaration public ThreadLord<T> LimitQueue(int limit) Parameters Type Name Description int limit The maximum number of tasks to be queued. Returns Type Description ThreadLord<T> The ThreadLord instance with the queue size limit set. OnError(Action<Exception>) On error callback. Declaration public ThreadLord<T> OnError(Action<Exception> onError) Parameters Type Name Description Action<Exception> onError Returns Type Description ThreadLord<T> Start() Starts processing tasks using worker threads. Declaration public ThreadLord<T> Start() Returns Type Description ThreadLord<T> The ThreadLord instance in the Running state. Stop() Stops processing tasks. Declaration public ThreadLord<T> Stop() Returns Type Description ThreadLord<T> The ThreadLord instance in the Stopping state. WaitAll(Action) Waits for all tasks to be processed. Declaration public ThreadLord<T> WaitAll(Action whileWaiting = null) Parameters Type Name Description Action whileWaiting An optional action to perform while waiting for tasks to complete. Returns Type Description ThreadLord<T> The ThreadLord instance after all tasks are processed. WaitAllAndStop(Action) Waits for all tasks to be processed and then stops the processing. Declaration public ThreadLord<T> WaitAllAndStop(Action whileWaiting = null) Parameters Type Name Description Action whileWaiting An optional action to perform while waiting for tasks to complete. Returns Type Description ThreadLord<T> The ThreadLord instance after all tasks are processed and processing is stopped. Implements IDisposable Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.TimeSpanExtenstions.html": {
    "href": "api/mk.helpers.TimeSpanExtenstions.html",
    "title": "Class TimeSpanExtenstions | mk.helpers API",
    "summary": "Class TimeSpanExtenstions Provides extension methods for working with TimeSpan objects. Inheritance object TimeSpanExtenstions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers Assembly: mk.helpers.dll Syntax public static class TimeSpanExtenstions Methods Multiply(TimeSpan, int) Multiplies a TimeSpan by a specified multiplier. Declaration public static TimeSpan Multiply(this TimeSpan timeSpan, int multiplier) Parameters Type Name Description TimeSpan timeSpan The TimeSpan to be multiplied. int multiplier The multiplier value. Returns Type Description TimeSpan The result of the multiplication as a new TimeSpan. RoundToNearest(TimeSpan, TimeSpan) Rounds the given TimeSpan to the nearest multiple of the specified TimeSpan. Declaration public static TimeSpan RoundToNearest(this TimeSpan a, TimeSpan roundTo) Parameters Type Name Description TimeSpan a The TimeSpan to be rounded. TimeSpan roundTo The TimeSpan multiple to round to. Returns Type Description TimeSpan The rounded TimeSpan. Sum(IEnumerable<TimeSpan>) Calculates the sum of a collection of TimeSpan objects. Declaration public static TimeSpan Sum(this IEnumerable<TimeSpan> timeSpans) Parameters Type Name Description IEnumerable<TimeSpan> timeSpans The collection of TimeSpan objects. Returns Type Description TimeSpan The sum of the TimeSpan objects. ToHumanTimeString(TimeSpan, int) Converts a TimeSpan object to a simple human-readable string representation. Declaration public static string ToHumanTimeString(this TimeSpan span, int significantDigits = 3) Parameters Type Name Description TimeSpan span The TimeSpan to be converted. int significantDigits The number of significant digits to use for output. Default is 3. Returns Type Description string The human-readable string representation of the TimeSpan."
  },
  "api/mk.helpers.Types.DownloadFileResult.html": {
    "href": "api/mk.helpers.Types.DownloadFileResult.html",
    "title": "Class DownloadFileResult | mk.helpers API",
    "summary": "Class DownloadFileResult Inheritance object DownloadFileResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public class DownloadFileResult Properties FilePath Declaration public string FilePath { get; set; } Property Value Type Description string Size Declaration public long Size { get; set; } Property Value Type Description long Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Types.EntityChange.html": {
    "href": "api/mk.helpers.Types.EntityChange.html",
    "title": "Class EntityChange | mk.helpers API",
    "summary": "Class EntityChange Inheritance object EntityChange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public class EntityChange Properties NestedProperty Declaration public bool NestedProperty { get; set; } Property Value Type Description bool NewValue Declaration public object NewValue { get; set; } Property Value Type Description object OldValue Declaration public object OldValue { get; set; } Property Value Type Description object Property Declaration public string Property { get; set; } Property Value Type Description string PropertyType Declaration public Type PropertyType { get; set; } Property Value Type Description Type Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Types.EnumWrapper-1.html": {
    "href": "api/mk.helpers.Types.EnumWrapper-1.html",
    "title": "Class EnumWrapper<T> | mk.helpers API",
    "summary": "Class EnumWrapper<T> Inheritance object EnumWrapper<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public class EnumWrapper<T> where T : struct, IConvertible Type Parameters Name Description T Constructors EnumWrapper() Declaration public EnumWrapper() EnumWrapper(T) Declaration public EnumWrapper(T enumValue) Parameters Type Name Description T enumValue Properties Key Declaration public int Key { get; set; } Property Value Type Description int Name Declaration public string Name { get; set; } Property Value Type Description string Methods FromName(string) Declaration public static EnumWrapper<T> FromName(string enumValue) Parameters Type Name Description string enumValue Returns Type Description EnumWrapper<T> FromValue(T) Declaration public static EnumWrapper<T> FromValue(T enumValue) Parameters Type Name Description T enumValue Returns Type Description EnumWrapper<T> GetEnum() Declaration public T GetEnum() Returns Type Description T GetEnum(EnumWrapper<T>) Declaration public static T GetEnum(EnumWrapper<T> enumWrapper) Parameters Type Name Description EnumWrapper<T> enumWrapper Returns Type Description T Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Types.EnumerableExtensions.html": {
    "href": "api/mk.helpers.Types.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | mk.helpers API",
    "summary": "Class EnumerableExtensions Provides extension methods for working with IEnumerable<T> collections. Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public static class EnumerableExtensions Methods CountAsync<T>(IAsyncEnumerable<T>) Declaration public static Task<int> CountAsync<T>(this IAsyncEnumerable<T> source) Parameters Type Name Description IAsyncEnumerable<T> source Returns Type Description Task<int> Type Parameters Name Description T FilterByReference<TSource, TOrder>(IEnumerable<TSource>, IEnumerable<TOrder>, Func<TSource, TOrder, bool>) Filters items from a source collection based on a comparison predicate against a reference collection. Declaration public static IEnumerable<TSource> FilterByReference<TSource, TOrder>(this IEnumerable<TSource> source, IEnumerable<TOrder> orderReference, Func<TSource, TOrder, bool> comparisonPredicate) Parameters Type Name Description IEnumerable<TSource> source The source collection from which to filter items. IEnumerable<TOrder> orderReference The reference collection used for comparison. Func<TSource, TOrder, bool> comparisonPredicate A predicate that determines whether an item in the source collection should be included based on the reference collection. Returns Type Description IEnumerable<TSource> An IEnumerable<TSource> containing items from the source collection that satisfy the comparison predicate. Type Parameters Name Description TSource The type of elements in the source collection. TOrder The type of elements in the reference collection. Remarks This method filters items from the source collection based on a comparison predicate against a reference collection. The comparisonPredicate function is used to determine if an item should be included in the result. IsAnyOf<T>(T, params T[]) Checks if an item is any of a given list of items. Declaration public static bool IsAnyOf<T>(this T source, params T[] list) Parameters Type Name Description T source The source item to check. T[] list The list of items to check against. Returns Type Description bool true if the source item is any of the items in the list; otherwise, false. Type Parameters Name Description T The type of elements in the collection. Median<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Extension method to calculate the median of a sequence of numeric values using a selector. Supported types are int, decimal, double, and long. Declaration public static TResult Median<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) where TResult : struct, IComparable<TResult>, IConvertible Parameters Type Name Description IEnumerable<TSource> source An IEnumerable containing the elements. Func<TSource, TResult> selector A function to extract the numeric value from each element. Returns Type Description TResult The median value of the numeric list. Type Parameters Name Description TSource The type of the elements in the source collection. TResult The numeric type of the values returned by the selector (int, decimal, double, long). Exceptions Type Condition ArgumentException Thrown when the source sequence is empty. PagedAsync<T>(IAsyncEnumerable<T>, int, int) Declaration public static Task<PagedResult<T>> PagedAsync<T>(this IAsyncEnumerable<T> source, int page, int pageSize) where T : class Parameters Type Name Description IAsyncEnumerable<T> source int page int pageSize Returns Type Description Task<PagedResult<T>> Type Parameters Name Description T Paged<T>(IEnumerable<T>, int, int) Implements paging on an IEnumerable<T> source. Declaration public static PagedResult<T> Paged<T>(this IEnumerable<T> source, int page, int pageSize) where T : class Parameters Type Name Description IEnumerable<T> source The source collection. int page The current page number. int pageSize The number of items per page. Returns Type Description PagedResult<T> A PagedResult<T> containing the paged data. Type Parameters Name Description T The type of elements in the collection. RemoveDuplicates<TSource>(IEnumerable<TSource>, Func<TSource, TSource, bool>) Removes duplicate items from a collection based on a comparison predicate. Declaration public static IEnumerable<TSource> RemoveDuplicates<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, bool> comparisonPredicate) Parameters Type Name Description IEnumerable<TSource> source The source collection to remove duplicates from. Func<TSource, TSource, bool> comparisonPredicate A predicate to determine duplicate items. Returns Type Description IEnumerable<TSource> An IEnumerable<TSource> containing unique elements based on the comparison predicate. Type Parameters Name Description TSource The type of elements in the source collection. SkipAsync<T>(IAsyncEnumerable<T>, int) Declaration public static IAsyncEnumerable<T> SkipAsync<T>(this IAsyncEnumerable<T> source, int count) Parameters Type Name Description IAsyncEnumerable<T> source int count Returns Type Description IAsyncEnumerable<T> Type Parameters Name Description T SortByReference(List<string>, List<string>) Declaration public static List<string> SortByReference(this List<string> listToSort, List<string> orderReference) Parameters Type Name Description List<string> listToSort List<string> orderReference Returns Type Description List<string> SortByReference<TSource, TOrder>(IEnumerable<TSource>, IEnumerable<TOrder>, Func<TSource, TOrder, bool>) Sorts a collection based on the order of a reference collection using a custom comparison predicate. Declaration public static IEnumerable<TSource> SortByReference<TSource, TOrder>(this IEnumerable<TSource> source, IEnumerable<TOrder> orderReference, Func<TSource, TOrder, bool> comparisonPredicate) Parameters Type Name Description IEnumerable<TSource> source The source collection to be sorted. IEnumerable<TOrder> orderReference The reference collection that defines the desired order. Func<TSource, TOrder, bool> comparisonPredicate A custom comparison predicate that takes elements from both collections and returns a boolean indicating their relative order. Returns Type Description IEnumerable<TSource> A new IEnumerable<TSource> sorted based on the custom comparison predicate. Type Parameters Name Description TSource The type of elements in the source collection. TOrder The type of elements in the reference collection. Remarks This method sorts the source collection based on the order of elements in the reference collection. It allows you to specify a custom comparison predicate that determines the sorting order based on elements from both collections. If a key in the source collection cannot be found in the orderReference collection, it is placed at the end of the sorted result. TakeAsync<T>(IAsyncEnumerable<T>, int) Declaration public static IAsyncEnumerable<T> TakeAsync<T>(this IAsyncEnumerable<T> source, int count) Parameters Type Name Description IAsyncEnumerable<T> source int count Returns Type Description IAsyncEnumerable<T> Type Parameters Name Description T ToListAsync<T>(IAsyncEnumerable<T>) Declaration public static Task<List<T>> ToListAsync<T>(this IAsyncEnumerable<T> source) Parameters Type Name Description IAsyncEnumerable<T> source Returns Type Description Task<List<T>> Type Parameters Name Description T Yield<T>(T) Yields a single item as an IEnumerable<T>. Declaration public static IEnumerable<T> Yield<T>(this T obj) Parameters Type Name Description T obj The item to yield. Returns Type Description IEnumerable<T> An IEnumerable<T> containing the item. Type Parameters Name Description T The type of the item."
  },
  "api/mk.helpers.Types.ImageFormat.html": {
    "href": "api/mk.helpers.Types.ImageFormat.html",
    "title": "Enum ImageFormat | mk.helpers API",
    "summary": "Enum ImageFormat Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public enum ImageFormat Fields Name Description BMP GIF JPEG None PNG TIFF WEBP Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<ImageFormat>(ImageFormat) ObjectExtensions.IsIn<ImageFormat>(ImageFormat, params ImageFormat[]) ReflectionHelper.DeepClone<ImageFormat>(ImageFormat) EnumerableExtensions.IsAnyOf<ImageFormat>(ImageFormat, params ImageFormat[]) EnumerableExtensions.Yield<ImageFormat>(ImageFormat)"
  },
  "api/mk.helpers.Types.PagedResult-1.html": {
    "href": "api/mk.helpers.Types.PagedResult-1.html",
    "title": "Class PagedResult<T> | mk.helpers API",
    "summary": "Class PagedResult<T> Inheritance object PagedResultBase PagedResult<T> Inherited Members PagedResultBase.CurrentPage PagedResultBase.PageCount PagedResultBase.PageSize PagedResultBase.RowCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public class PagedResult<T> : PagedResultBase where T : class Type Parameters Name Description T Constructors PagedResult() Declaration public PagedResult() Properties Results Declaration public List<T> Results { get; set; } Property Value Type Description List<T> Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Types.PagedResultBase.html": {
    "href": "api/mk.helpers.Types.PagedResultBase.html",
    "title": "Class PagedResultBase | mk.helpers API",
    "summary": "Class PagedResultBase Inheritance object PagedResultBase PagedResult<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public abstract class PagedResultBase Properties CurrentPage Declaration public int CurrentPage { get; set; } Property Value Type Description int PageCount Declaration public int PageCount { get; set; } Property Value Type Description int PageSize Declaration public int PageSize { get; set; } Property Value Type Description int RowCount Declaration public int RowCount { get; set; } Property Value Type Description int Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<T>(T) ObjectExtensions.IsIn<T>(T, params T[]) ReflectionHelper.DeepClone<T>(T) ReflectionHelper.PublicPropertiesEqual<T>(T, T, params string[]) EnumerableExtensions.IsAnyOf<T>(T, params T[]) EnumerableExtensions.Yield<T>(T)"
  },
  "api/mk.helpers.Types.SerializationType.html": {
    "href": "api/mk.helpers.Types.SerializationType.html",
    "title": "Enum SerializationType | mk.helpers API",
    "summary": "Enum SerializationType Namespace: mk.helpers.Types Assembly: mk.helpers.dll Syntax public enum SerializationType Fields Name Description Bson Json Xml Extension Methods ObjectExtensions.AsDictionary(object) ObjectExtensions.ToExpandoObject(object) ReflectionHelper.Changes(object, object) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>) ReflectionHelper.CopyProperties(object, object, out List<EntityChange>, params string[]) ReflectionHelper.CopyProperties(object, object, params string[]) ReflectionHelper.CopyPropertiesFrom(object, object, out List<EntityChange>) ReflectionHelper.CopyPropertiesFrom(object, object, params string[]) ObjectExtensions.IsDefault<SerializationType>(SerializationType) ObjectExtensions.IsIn<SerializationType>(SerializationType, params SerializationType[]) ReflectionHelper.DeepClone<SerializationType>(SerializationType) EnumerableExtensions.IsAnyOf<SerializationType>(SerializationType, params SerializationType[]) EnumerableExtensions.Yield<SerializationType>(SerializationType)"
  },
  "api/mk.helpers.Types.html": {
    "href": "api/mk.helpers.Types.html",
    "title": "Namespace mk.helpers.Types | mk.helpers API",
    "summary": "Namespace mk.helpers.Types Classes DownloadFileResult EntityChange EnumWrapper<T> EnumerableExtensions Provides extension methods for working with IEnumerable<T> collections. PagedResultBase PagedResult<T> Enums ImageFormat SerializationType"
  },
  "api/mk.helpers.html": {
    "href": "api/mk.helpers.html",
    "title": "Namespace mk.helpers | mk.helpers API",
    "summary": "Namespace mk.helpers Classes Crc32Hash Implements a 32-bit CRC hash algorithm compatible with Zip etc. CsvHelper Provides methods for converting data to CSV format. DateTimeExtensions Provides extension methods for working with DateTime values. DictionaryExtensions Provides extension methods for working with Dictionary<TKey, TValue> and ConcurrentDictionary<TKey, TValue> collections. EnumHelper Provides utility methods for working with enumerations. FileHelper Provides utility methods for file-related operations. FileHelper.DownloadProgress HttpClientExtensions Provides extension methods for the HttpClient class. IntExtensions Provides extension methods for working with integer values. IpHelper Provides utility methods for working with IP addresses and their numeric representations. ListExtensions Provides extension methods for working with lists and collections. ObjectExtensions Provides extension methods for object manipulation. ParallelHelper Provides utility methods for parallel execution using the Parallel.ForEach pattern. PerfTimer A performance timer that measures the elapsed time for different actions and intervals. QueueExtensions Provides extension methods for working with queues. RandomHelper Provides utility methods for generating random values. ReflectionHelper Provides utility methods for reflection-related operations. Serialization Provides methods for data serialization and deserialization using JSON and BSON formats. StaticData A static class for managing and retrieving static data stored in a dictionary. StreamExtensions Provides extension methods for working with streams. StringExtensions Provides extension methods for string manipulation and formatting. TempStream A temporary file stream that tries to use a file stream in the temp folder, but falls back to a memory stream if that fails. Will delete the file on dispose unless specified otherwise. ThreadLord<T> Process a collection of tasks as fast as possible using a thread pool. TimeSpanExtenstions Provides extension methods for working with TimeSpan objects. Enums ThreadLord<T>.LordState Represents the state of the ThreadLord instance."
  }
}